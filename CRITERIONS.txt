COMPREHENSIVE TEST CRITERIA FOR UNIVERSAL MEDIA ENGINE
=======================================================

1. The code should implement test cases for all supported input video formats (.mp4, .mkv, .mov, .avi, .webm, .flv, .wmv) including edge cases like corrupted files and unsupported formats.
   Type: Correctness
   Necessity: Explicit

2. The code should include comprehensive input path validation tests covering directory traversal attacks, special characters, non-existent files, empty files, permission-denied scenarios, and system directory access attempts.
   Type: Security
   Necessity: Explicit

3. The code should test AI upscaling functionality with Real-ESRGAN across all scaling modes (2x, 4x upscaling and 2x, 4x, 8x downscaling) and handle cases where Real-ESRGAN is not available or fails.
   Type: Correctness
   Necessity: Explicit

4. The code should validate output file path generation and creation for all supported output formats (GIF, APNG, WebP, AVIF, MP4, WebM) including cases where output directories don't exist or lack write permissions.
   Type: Correctness
   Necessity: Explicit

5. The code should test memory estimation and GPU detection functionality for AI upscaling, including scenarios with insufficient memory and different GPU configurations (CUDA, MPS, CPU-only).
   Type: Correctness
   Necessity: Implicit

6. The code should implement edge case testing for video processing parameters including invalid time ranges (start > end, negative values), extreme frame rates, and zero-duration videos.
   Type: Correctness
   Necessity: Explicit

7. The code should test the complete user interaction flow including cancellation scenarios, invalid user inputs, and default value handling across all prompt stages.
   Type: Correctness
   Necessity: Explicit

8. The code should validate FFmpeg integration and error handling for scenarios where FFmpeg is not installed, returns errors, or produces invalid output.
   Type: Correctness
   Necessity: Explicit

9. The code should use Go's testing framework with proper test organization, setup/teardown functions, and table-driven tests for comprehensive coverage.
   Type: Coding Style
   Necessity: Implicit

10. The code should implement mock interfaces for external dependencies (FFmpeg, Python/Real-ESRGAN, file system operations) to enable isolated unit testing.
    Type: Efficiency & Performance
    Necessity: Implicit

11. The code should test file size validation including edge cases like files exactly at the 500MB limit, empty files, and extremely large files that exceed system limits.
    Type: Correctness
    Necessity: Explicit

12. The code should validate temporary file cleanup and resource management during AI upscaling, ensuring no orphaned files or memory leaks occur even when operations fail.
    Type: Efficiency & Performance
    Necessity: Implicit

13. The code should include comprehensive error message testing to ensure user-friendly error reporting for all failure scenarios with specific guidance for resolution.
    Type: Readability & Maintainability
    Necessity: Implicit

14. The code should test concurrent operations and thread safety for scenarios where multiple conversion processes might run simultaneously or be interrupted.
    Type: Correctness
    Necessity: Implicit

15. The code should implement integration tests that verify the complete end-to-end workflow from input validation through AI processing to final output generation, including cleanup verification.
    Type: Correctness
    Necessity: Explicit